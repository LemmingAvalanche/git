# ... run it through git-format-patch executable (what an idea!)
./git-format-patch \
    --no-cc \
    --description-file=cover-letter.txt \
    --to=kristofferhaugsbakk@fastmail.com \
    --cover-letter \
    --output-directory=patches \
    --header-cmd=./test-cmd \
    --add-header='X-Not-Command-Header: not that' \
    'HEAD^{/★meta}'..@

# Test with a corrupted --add-header
# NOTE: format-patch doesn’t error out. Not my problem though.
./git-format-patch \
    --no-cc \
    --description-file=cover-letter.txt \
    --to=kristofferhaugsbakk@fastmail.com \
    --cover-letter \
    --output-directory=patches \
    --header-cmd=./test-cmd \
    --add-header=$'X-Not-Command-Header\n\n: not that' \
    'HEAD^{/★meta}'..@

# Test config: should run the config headerCmd that I set
./git-format-patch \
    --no-cc \
    --description-file=cover-letter.txt \
    --to=kristofferhaugsbakk@fastmail.com \
    --cover-letter \
    --output-directory=patches \
    --add-header='X-Not-Command-Header: not that' \
    'HEAD^{/★meta}'..@

# Experiment with `git send-email --header-cmd`
git send-email --dry-run \
    --header-cmd=./send-email-header-cmd patches

# Corrupt version
git send-email --no-cc --dry-run \
    --header-cmd=./send-email-header-cmd-corrupt patches

# Test command for --header-cmd
#!/bin/sh

printf "X-Version: $GIT_FP_HEADER_CMD_VERSION\n"
hash="$GIT_FP_HEADER_CMD_HASH"
if [ $hash ]; then
    printf "X-ShaOne: $hash\n"
fi
printf "X-Count: $GIT_FP_HEADER_CMD_COUNT\n"

# END Test command

# Corrupted command for --header-cmd (not valid headers)
printf "X-Version: $GIT_FP_HEADER_CMD_VERSION\n"
# Illegal!
printf "\n\n"
printf "X-Count: $GIT_FP_HEADER_CMD_COUNT\n"

# END

./git-format-patch \
    --no-cc \
    --description-file=cover-letter.txt \
    --to=kristofferhaugsbakk@fastmail.com \
    --cover-letter \
    --output-directory=patches \
    --header-cmd=./test-cmd-corrupted \
    --add-header='X-Not-Command-Header: not that' \
    'HEAD^{/★meta}'..@

# Diff command :)
git diff 'HEAD^{/★meta: base}' -- ':(exclude)bounty/**'

# For t/
./t4014-format-patch.sh &&
./t4021-format-patch-numbered.sh &&
./t4028-format-patch-mime-headers.sh &&
./t4036-format-patch-signer-mime.sh &&
say-done ||
say-failed

# git send-email header-cmd
#!/bin/sh
printf "X-Header-One: One\n"
printf "X-Header-Two: Two\n"
# END

# Corrupt git send-email header-cmd
#!/bin/sh
printf "X-Header-One: One\n"
printf "\n\n"
printf "X-Header-Two: Two\n"
# END
